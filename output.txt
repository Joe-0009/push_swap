#include "push_swap.h"

void chunk_sort(t_stack **a, t_stack **b) {
    int size = stack_size(*a);
    int chunk_count = 10; // Increase the number of chunks
    int chunk_size = size / chunk_count;

    int *chunks = create_chunks(*a, chunk_size, chunk_count);

    for (int i = 0; i < chunk_count; i++) {
        push_chunk_to_b(a, b, chunks[i], chunks[i + 1]);
    }

    while (*b) {
        int max = find_max(*b);
        while ((*b)->value != max) {
            if (get_position(*b, max) <= stack_size(*b) / 2)
                rb(b);
            else
                rrb(b);
        }
        pa(a, b);
    }

    free(chunks);
}

void push_chunk_to_b(t_stack **a, t_stack **b, int min, int max) {
    while (has_values_in_range(*a, min, max)) {
        if ((*a)->value >= min && (*a)->value <= max) {
            pb(a, b);
        } else {
            if (get_position(*a, min) <= stack_size(*a) / 2)
                ra(a);
            else
                rra(a);
        }
    }
}

int has_values_in_range(t_stack *stack, int min, int max) {
    while (stack) {
        if (stack->value >= min && stack->value <= max)
            return 1;
        stack = stack->next;
    }
    return 0;
}

int find_max(t_stack *stack) {
    int max = stack->value;
    while (stack) {
        if (stack->value > max)
            max = stack->value;
        stack = stack->next;
    }
    return max;
}

int *create_chunks(t_stack *stack, int chunk_size, int chunk_count) {
    int *chunks = malloc(sizeof(int) * (chunk_count + 1));
    int *values = stack_to_array(stack);
    sort_array(values, stack_size(stack));

    for (int i = 0; i < chunk_count; i++) {
        chunks[i] = values[i * chunk_size];
    }
    chunks[chunk_count] = values[stack_size(stack) - 1];

    free(values);
    return chunks;
}

int *stack_to_array(t_stack *stack) {
    int size = stack_size(stack);
    int *array = malloc(sizeof(int) * size);
    for (int i = 0; i < size; i++) {
        array[i] = stack->value;
        stack = stack->next;
    }
    return array;
}

void sort_array(int *array, int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (array[j] > array[j + 1]) {
                int temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}

ra
ra
pb
pb
pb
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
pb
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
ra
pb
ra
pb
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
pb
rra
rra
rra
pb
rra
rra
pb
rra
rra
rra
rra
rra
pb
rra
rra
rra
rra
rra
pb
rra
rra
pb
rra
pb
rra
rra
rra
rra
pb
rra
rra
pb
rra
rra
rra
rra
rra
rra
pb
rra
pb
rra
rra
rra
rra
pb
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
pb
rra
rra
rra
rra
rra
pb
rra
pb
pb
rra
rra
pb
rra
pb
rra
rra
rra
rra
rra
rra
rra
rra
rra
pb
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
rra
pb
rra
rra
rra
rra
pb
rra
rra
rra
rra
rra
rra
pb
rra
pb
rra
rra
pb
rra
rra
rra
rra
pb
rra
rra
rra
rra
rra
rra
rra
rra
pb
rra
rra
rra
rra
pb
rra
rra
pb
rra
pb
rra
rra
pb
rra
rra
rra
rra
rra
rra
rra
pb
rra
rra
rra
rra
pb
rra
rra
rra
rra
rra
pb
rra
rra
pb
rra
pb
rra
pb
rra
rra
pb
rra
rra
pb
rra
rra
rra
pb
rra
rra
pb
rra
rra
pb
rra
rra
rra
rra
rra
pb
rra
pb
rra
rra
pb
rra
rra
rra
pb
rra
rra
rra
rra
rra
rra
rra
pb
rra
pb
rra
pb
rra
rra
rra
rra
rra
rra
rra
rra
rra
pb
rra
rra
rra
pb
rra
rra
rra
pb
rra
rra
pb
rra
rra
rra
pb
rra
rra
rra
rra
rra
pb
rra
pb
pb
pb
rra
rra
rra
rra
rra
rra
rra
pb
rra
rra
pb
rra
rra
rra
rra
pb
rra
rra
pb
rra
pb
rra
pb
rra
pb
rra
pb
rra
rra
pb
rra
rra
pb
rra
rra
pb
rra
rra
pb
rra
pb
rra
pb
rra
pb
rra
rra
pb
rra
rra
pb
rra
rra
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
pb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
pa
rrb
rrb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rrb
pa
rb
rb
rb
rb
rb
rb
pa
rrb
pa
rb
rb
rb
rb
rb
pa
rrb
pa
pa
rrb
rrb
rrb
rrb
rrb
pa
rrb
rrb
pa
pa
pa
pa
rb
rb
pa
rrb
rrb
rrb
rrb
pa
rb
rb
pa
rrb
pa
rrb
pa
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
pa
rrb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
rb
rb
rb
rb
pa
rrb
pa
rrb
rrb
rrb
rrb
rrb
pa
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
pa
rrb
rrb
rrb
pa
rb
rb
pa
rrb
rrb
rrb
rrb
pa
rb
pa
rrb
rrb
pa
rb
pa
pa
rrb
pa
rb
rb
rb
rb
rb
rb
rb
rb
pa
rb
rb
rb
rb
rb
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
pa
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
pa
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
rrb
pa
rb
pa
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
pa
pa
pa
rrb
rrb
pa
rrb
pa
pa
rb
rb
rb
rb
rb
rb
rb
pa
rb
rb
rb
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
pa
rrb
pa
rb
rb
rb
pa
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
rb
rb
pa
rrb
pa
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
pa
rrb
rrb
pa
rrb
rrb
pa
pa
rrb
pa
pa
rb
rb
rb
rb
pa
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
pa
rrb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rrb
rrb
rrb
rrb
rrb
rrb
rrb
pa
rrb
rrb
rrb
rrb
rrb
pa
rb
rb
rb
rb
rb
rb
pa
rb
rb
rb
rb
rb
rb
pa
rb
rb
rb
rb
rb
pa
rb
rb
rb
rb
rb
pa
rrb
rrb
rrb
rrb
pa
rb
rb
rb
pa
rb
pa
rb
rb
pa
pa
pa
pa
pa
pa
Sorted Stack: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
